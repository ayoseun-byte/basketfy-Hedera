// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/buy-basket": {
            "post": {
                "description": "Handles the purchase of a basket by a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basket"
                ],
                "summary": "Buy a basket",
                "parameters": [
                    {
                        "description": "Buy Basket payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BuyBasketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basket purchase successful",
                        "schema": {
                            "$ref": "#/definitions/models.BasketResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/create-basket": {
            "post": {
                "description": "Creates a new basket with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basket"
                ],
                "summary": "Create a new basket",
                "parameters": [
                    {
                        "description": "Create Basket payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateBasketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basket created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.BasketResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/get-all-basket": {
            "get": {
                "description": "Retrieves all baskets with an optional limit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basket"
                ],
                "summary": "Get all baskets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit the number of baskets returned",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All Basket data retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/portfolio.BasketCatalogue"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid limit query parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/get-single-basket": {
            "get": {
                "description": "Retrieves a single basket by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basket"
                ],
                "summary": "Get single basket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Basket ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Single basket data",
                        "schema": {
                            "$ref": "#/definitions/portfolio.BasketCatalogue"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid basket ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/get-user-basket": {
            "get": {
                "description": "Retrieves the basket(s) associated with a user by user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basket"
                ],
                "summary": "Get user basket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User basket data",
                        "schema": {
                            "$ref": "#/definitions/models.BasketResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/get-user-basket-analytics": {
            "get": {
                "description": "Returns analytics data for the user's portfolio including TVL, 7-day trend, risk score, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Generate portfolio analytics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Analytics data for the user's portfolio",
                        "schema": {
                            "$ref": "#/definitions/portfolio.UserBasket"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/get-user-baskets": {
            "get": {
                "description": "Retrieves all user baskets with an optional limit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basket"
                ],
                "summary": "Get user baskets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit the number of baskets returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All Basket data retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/portfolio.UserBasket"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid limit query parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/rebalance-ai-stream": {
            "post": {
                "description": "Streams an AI-generated response for a user's basket rebalance request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "AI"
                ],
                "summary": "Generate streaming AI response",
                "parameters": [
                    {
                        "description": "User basket rebalance request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserBasketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Streamed AI response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BasketData": {
            "type": "object",
            "required": [
                "tokens"
            ],
            "properties": {
                "basketName": {
                    "type": "string"
                },
                "basketReferenceId": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "investmentAmount": {
                    "type": "number"
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BasketItem"
                    }
                },
                "totalWeight": {
                    "type": "number"
                }
            }
        },
        "models.BasketItem": {
            "type": "object",
            "required": [
                "entryPrice",
                "token",
                "tokenSymbol"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "entryPrice": {
                    "type": "number"
                },
                "isNative": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "tokenAddress": {
                    "type": "string"
                },
                "tokenSymbol": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "models.BasketResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {},
                "status": {
                    "type": "integer"
                }
            }
        },
        "models.BuyBasketRequest": {
            "type": "object",
            "required": [
                "basketData"
            ],
            "properties": {
                "basketData": {
                    "$ref": "#/definitions/models.BasketData"
                },
                "sessionId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.CreateBasketRequest": {
            "type": "object",
            "required": [
                "creator",
                "name",
                "userId"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "basketReferenceId": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Token"
                    }
                },
                "uri": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.Token": {
            "type": "object",
            "properties": {
                "isNative": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "ticker": {
                    "type": "string"
                },
                "tokenAddress": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "models.UserBasketRequest": {
            "type": "object",
            "properties": {
                "basketId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "portfolio.BasketCatalogue": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "basketReferenceId": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "holders": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "performance30d": {
                    "type": "number"
                },
                "performance7d": {
                    "type": "number"
                },
                "symbol": {
                    "type": "string"
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/portfolio.BasketToken"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "portfolio.BasketInvestment": {
            "type": "object",
            "properties": {
                "basketName": {
                    "type": "string"
                },
                "basketReferenceId": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "riskScore": {
                    "type": "number"
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/portfolio.TokenInfo"
                    }
                },
                "totalRebalanceSessions": {
                    "type": "integer"
                },
                "totalWeight": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "portfolio.BasketToken": {
            "type": "object",
            "properties": {
                "isNative": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "ticker": {
                    "type": "string"
                },
                "tokenAddress": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "portfolio.TokenInfo": {
            "type": "object",
            "properties": {
                "closing_price": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "entry_price": {
                    "type": "number"
                },
                "isNative": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "symbol": {
                    "type": "string"
                },
                "tokenAddress": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "portfolio.UserBasket": {
            "type": "object",
            "properties": {
                "basketInvestments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/portfolio.BasketInvestment"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Basketfy AI API",
	Description:      "This is the API server for Basketfy AI application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
